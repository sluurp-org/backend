generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-arm64-openssl-3.0.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PhoneVerification {
  id Int @id @default(autoincrement())

  phone     String
  code      String
  type      VerificationType
  expiredAt DateTime

  @@unique([phone, type])
}

enum VerificationType {
  REGISTER
  FIND_PASSWORD
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  loginId  String  @unique
  phone    String  @unique
  password String
  salt     String

  refreshToken String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  provider   Provider @default(LOCAL)
  providerId String?

  workspaceUser WorkspaceUser[]

  @@unique([provider, providerId])
}

enum Provider {
  LOCAL
  NAVER
}

model InternalMailTemplate {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model WorkspaceUser {
  id          Int           @id @default(autoincrement())
  userId      Int
  workspaceId Int
  role        WorkspaceRole @default(MEMBER)

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, workspaceId])
}

enum WorkspaceRole {
  OWNER
  MEMBER
}

model Workspace {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  lastPurchaseAt DateTime? @default(now())
  nextPurchaseAt DateTime?

  workspaceUser    WorkspaceUser[]
  store            Store[]
  product          Product[]
  order            Order[]
  content          Content[]
  event            Event[]
  kakaoCredential  KakaoCredential?
  messageTemplate  MessageTemplate[]
  orderHistory     OrderHistory[]
  contentGroup     ContentGroup[]
  purchaseHistory  PurchaseHistory[]
  workspaceBilling WorkspaceBilling?
  eventHistory     EventHistory[]
  Recepit          Recepit[]
}

model WorkspaceBilling {
  id          Int    @id @default(autoincrement())
  workspaceId Int
  cardNumber  String
  billingKey  String @unique

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  purchaseHistory PurchaseHistory[]

  @@unique([workspaceId])
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String
  type        StoreType
  enabled     Boolean   @default(true)
  readonly    Boolean   @default(false)
  workspaceId Int

  lastProductSyncAt DateTime?
  lastOrderSyncAt   DateTime?

  smartStoreCredentials SmartStoreCredentials?
  workspace             Workspace              @relation(fields: [workspaceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  product      Product[]
  order        Order[]
  orderHistory OrderHistory[]
}

enum StoreType {
  SMARTSTORE
}

model SmartStoreCredentials {
  id        Int    @id @default(autoincrement())
  name      String
  storeId   Int    @unique
  channelId Int

  applicationId     String
  applicationSecret String
  emailParseable    Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  store Store @relation(fields: [storeId], references: [id])
}

model SmartStoreToken {
  applicationId     String
  applicationSecret String

  accessToken String?
  expiresAt   DateTime?

  @@id([applicationId, applicationSecret])
}

model Product {
  id           Int     @id @default(autoincrement())
  name         String
  productImage String?

  productId          String
  storeId            Int
  workspaceId        Int
  disableGlobalEvent Boolean @default(false)

  store     Store     @relation(fields: [storeId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  deletedAt      DateTime?
  productVariant ProductVariant[]
  order          Order[]
  event          Event[]

  @@unique([productId, storeId])
}

model ProductVariant {
  id        Int    @id @default(autoincrement())
  productId Int
  variantId String

  name String

  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  order     Order[]
  event     Event[]

  @@unique([variantId, productId])
}

model Order {
  id Int @id @default(autoincrement())

  productOrderId String
  orderId        String
  status         OrderStatus @default(PAY_WAITING)

  storeId          Int
  productId        Int
  productVariantId Int?
  workspaceId      Int

  ordererName  String
  ordererEmail String?
  ordererPhone String?

  receiverName  String?
  receiverEmail String?
  receiverPhone String?

  price    Int?      @db.UnsignedMediumInt
  quantity Int?      @db.UnsignedMediumInt
  orderAt  DateTime?

  deliveryAddress        String?
  deliveryMessage        String?
  deliveryCompany        String?
  deliveryTrackingNumber String?

  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
  store          Store           @relation(fields: [storeId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  deletedAt    DateTime?
  eventHistory EventHistory[]
  orderHistory OrderHistory[]

  @@unique([orderId, productId, productOrderId, storeId])
  @@unique([orderId, productOrderId, storeId])
  @@index([productOrderId])
}

enum OrderStatus {
  PAY_WAITING
  PAYED
  PRODUCT_PREPARE
  DELIVERING
  DELIVERED
  PURCHASE_CONFIRM
  EXCHANGE
  CANCEL
  REFUND
  CANCEL_NOPAY
}

model OrderHistory {
  id Int @id @default(autoincrement())

  type          OrderHistoryType
  changedStatus OrderStatus?
  message       String?

  orderId        Int
  eventHistoryId String?
  storeId        Int
  workspaceId    Int

  order        Order         @relation(fields: [orderId], references: [id])
  store        Store         @relation(fields: [storeId], references: [id])
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  eventHistory EventHistory? @relation(fields: [eventHistoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId, workspaceId])
}

enum OrderHistoryType {
  STATUS_CHANGE
  EVENT
  MESSAGE
}

model ContentGroup {
  id          Int         @id @default(autoincrement())
  name        String
  workspaceId Int
  type        ContentType @default(TEXT)
  readonly    Boolean     @default(false)

  oneTime       Boolean @default(false)
  expireMinute  Int?
  downloadLimit Int?

  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  deletedAt       DateTime?
  content         Content[]
  messageTemplate MessageTemplate[]
}

enum ContentType {
  FILE
  TEXT
  URL
  QRCODE
  BARCODE
}

model Content {
  id             Int     @id @default(autoincrement())
  workspaceId    Int
  contentGroupId Int
  used           Boolean @default(false)

  // text type QR code, barcode, url, etc...
  text String?
  type ContentType @default(TEXT)

  // file type
  status    ContentStatus @default(PENDING)
  name      String?
  key       String?
  size      Int?
  mimeType  String?
  extension String?

  contentGroup ContentGroup @relation(fields: [contentGroupId], references: [id])
  workspace    Workspace    @relation(fields: [workspaceId], references: [id])

  createdAt            DateTime                        @default(now())
  updatedAt            DateTime                        @default(now()) @updatedAt
  deletedAt            DateTime?
  eventHistoryContents EventHistoryContentConnection[]
}

enum ContentStatus {
  PENDING
  READY
}

model KakaoCredential {
  id          Int    @id @default(autoincrement())
  workspaceId Int    @unique
  channelId   String @unique
  searchId    String @unique

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Event {
  id               Int     @id @default(autoincrement())
  workspaceId      Int
  productId        Int?
  productVariantId Int?
  messageId        Int
  isGlobal         Boolean @default(false)

  type OrderStatus

  product        Product?        @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  message        MessageTemplate @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  eventHistory EventHistory[]

  @@unique([productId, productVariantId, messageId, type])
}

model EventHistoryContentConnection {
  id Int @id @default(autoincrement())

  eventHistoryId String
  contentId      Int

  eventHistory    EventHistory @relation(fields: [eventHistoryId], references: [id])
  content         Content      @relation(fields: [contentId], references: [id])
  downloadCount   Int          @default(0)
  downloadLimit   Int?
  disableDownload Boolean      @default(false)
  lastDownloadAt  DateTime?
  firstDownloadAt DateTime?
  expiredAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EventHistory {
  id          String @id @default(uuid())
  workspaceId Int
  eventId     Int?
  orderId     Int?
  messageId   Int?

  messageContent   String? @db.LongText
  messageVariables Json?

  status  EventStatus
  message String?

  processedAt      DateTime?
  solapiStatusCode String?
  solapiMessageId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workspace       Workspace                       @relation(fields: [workspaceId], references: [id])
  event           Event?                          @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order           Order?                          @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  messageTemplate MessageTemplate?                @relation(fields: [messageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderHistory    OrderHistory[]
  contents        EventHistoryContentConnection[]
}

enum EventStatus {
  PENDING // 발송 준비 중
  CONTENT_READY // 컨텐츠 준비 완료
  READY // 발송 준비 완료
  PROCESSING // 발송 중 (SOLAPI 응답 대기 또는 이메일)
  SUCCESS // 발송 완료
  FAILED // 발송 실패
}

enum MessageTarget {
  BUYER
  RECEIVER
  CUSTOM
}

model MessageTemplate {
  id               Int     @id @default(autoincrement())
  name             String
  completeDelivery Boolean @default(false)
  readonly         Boolean @default(false)
  isGlobal         Boolean @default(false)

  workspaceId     Int?
  kakaoTemplateId Int?
  contentGroupId  Int?

  target      MessageTarget?
  customPhone String?
  customEmail String?

  kakaoTemplate KakaoTemplate? @relation(fields: [kakaoTemplateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspace     Workspace?     @relation(fields: [workspaceId], references: [id])
  contentGroup  ContentGroup?  @relation(fields: [contentGroupId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  event        Event[]
  eventHistory EventHistory[]
}

model KakaoTemplate {
  id         Int                 @id @default(autoincrement())
  templateId String              @unique
  status     KakaoTemplateStatus @default(PENDING)

  categoryCode String
  content      String @db.LongText

  /// [KakaoTemplateButtons]
  buttons Json?

  imageId  String?
  imageUrl String?
  extra    String?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  MessageTemplate MessageTemplate[]
}

enum KakaoTemplateStatus {
  APPROVED
  REJECTED
  PENDING
  UPLOADED
}

model Variables {
  id Int @id @default(autoincrement())

  key         String  @unique
  value       String
  description String?
  example     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Recepit {
  id Int @id @default(autoincrement())

  workspaceId Int

  emailSendCount    Int @default(0)
  alimtalkSendCount Int @default(0)
  contentSendCount  Int @default(0)

  emailPrice    Int @default(0)
  alimtalkPrice Int @default(0)
  contentPrice  Int @default(0)

  amount         Int @default(0)
  discountAmount Int @default(0)
  totalAmount    Int @default(0)

  issuedAt DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  PurchaseHistory PurchaseHistory[]
}

model PurchaseHistory {
  id String @id @default(uuid())

  workspaceId Int

  amount         Int? // 결제 금액
  discountAmount Int? @default(0) // 할인 금액 
  totalAmount    Int? // 총 결제 금액

  reason      String?
  status      PurchaseStatus
  purchasedAt DateTime?
  retry       Int            @default(0)

  billingId   Int?
  scheduledId String?
  recepitId   Int

  recepit   Recepit           @relation(fields: [recepitId], references: [id])
  workspace Workspace         @relation(fields: [workspaceId], references: [id])
  billing   WorkspaceBilling? @relation(fields: [billingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([workspaceId])
}

model Config {
  id Int @id @default(autoincrement())

  defaultPrice        Int @default(5000)
  customAlimtalkPrice Int @default(50)
  alimtalkSendPrice   Int @default(100)
  emailSendPrice      Int @default(150)
  contentSendPrice    Int @default(100)
}

enum PurchaseStatus {
  CANCELLED
  FAILED
  PAID
  PARTIAL_CANCELLED
  PAY_PENDING
  READY
  VIRTUAL_ACCOUNT_ISSUED
}
