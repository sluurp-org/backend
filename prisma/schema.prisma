generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-arm64-openssl-3.0.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PhoneVerification {
  id Int @id @default(autoincrement())

  phone     String
  code      String
  type      VerificationType
  expiredAt DateTime

  @@unique([phone, type])
}

enum VerificationType {
  REGISTER
  FIND_PASSWORD
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  loginId  String  @unique
  phone    String  @unique
  password String
  salt     String

  refreshToken String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  provider   Provider @default(LOCAL)
  providerId String?

  isAdmin Boolean @default(false)

  workspaceUser WorkspaceUser[]

  @@unique([provider, providerId])
}

enum Provider {
  LOCAL
  NAVER
}

model Benefit {
  id Int @id @default(autoincrement())

  name        String
  description String
  type        BenefitType
  value       Int

  enabled Boolean @default(true)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  workspaceBenefit WorkspaceBenefit[]
}

enum BenefitType {
  DISCOUNT_PERCENT
  DISCOUNT_AMOUNT
  DEFAULT_PRICE
}

model WorkspaceBenefit {
  id Int @id @default(autoincrement())

  workspaceId Int
  benefitId   Int

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  benefit   Benefit   @relation(fields: [benefitId], references: [id])

  endedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([workspaceId, benefitId])
}

model WorkspaceUser {
  id          Int           @id @default(autoincrement())
  userId      Int
  workspaceId Int
  role        WorkspaceRole @default(MEMBER)

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, workspaceId])
}

enum WorkspaceRole {
  OWNER
  MEMBER
}

model Workspace {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  lastPurchaseAt DateTime @default(now())
  nextPurchaseAt DateTime

  billing                    Billing?
  workspaceUser              WorkspaceUser[]
  store                      Store[]
  product                    Product[]
  order                      Order[]
  content                    Content[]
  event                      Event[]
  kakaoCredential            KakaoCredential?
  message                    Message[]
  orderHistory               OrderHistory[]
  contentGroup               ContentGroup[]
  purchaseHistory            PurchaseHistory[]
  eventHistory               EventHistory[]
  dailyWorkspaceStatistics   DailyWorkspaceStatistics[]
  monthlyWorkspaceStatistics MonthlyWorkspaceStatistics[]
  workspaceBenefit           WorkspaceBenefit[]
}

model Billing {
  id          Int    @id @default(autoincrement())
  workspaceId Int
  cardNumber  String
  billingKey  String @unique

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  purchaseHistory PurchaseHistory[]

  @@unique([workspaceId])
}

model KakaoCredential {
  id          Int    @id @default(autoincrement())
  workspaceId Int    @unique
  channelId   String @unique
  searchId    String @unique

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Store {
  id          Int @id @default(autoincrement())
  workspaceId Int

  name    String
  type    StoreType
  enabled Boolean   @default(true)

  lastProductSyncAt DateTime?
  lastOrderSyncAt   DateTime?

  smartStoreCredentials SmartStoreCredentials?
  workspace             Workspace              @relation(fields: [workspaceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  product                Product[]
  order                  Order[]
  orderHistory           OrderHistory[]
  monthlyStoreStatistics MonthlyStoreStatistics[]
  dailyStoreStatistics   DailyStoreStatistics[]
}

enum StoreType {
  SMARTSTORE
}

model SmartStoreCredentials {
  id        Int    @id @default(autoincrement())
  name      String
  storeId   Int    @unique
  channelId Int

  applicationId     String
  applicationSecret String
  emailParseable    Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  store Store @relation(fields: [storeId], references: [id])
}

model SmartStoreToken {
  applicationId     String
  applicationSecret String

  accessToken String?
  expiresAt   DateTime?

  @@id([applicationId, applicationSecret])
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String
  productImageUrl String?

  productId          String
  storeId            Int
  workspaceId        Int
  disableGlobalEvent Boolean @default(false)

  store     Store     @relation(fields: [storeId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  deletedAt      DateTime?
  productVariant ProductVariant[]
  order          Order[]
  event          Event[]

  @@unique([productId, storeId])
}

model ProductVariant {
  id   Int    @id @default(autoincrement())
  name String

  productId Int
  variantId String

  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  order     Order[]
  event     Event[]

  @@unique([variantId, productId])
}

enum OrderCreatedBy {
  USER
  SYSTEM
}

model Order {
  id Int @id @default(autoincrement())

  productOrderId String
  orderId        String
  status         OrderStatus @default(PAY_WAITING)

  storeId          Int
  productId        Int
  productVariantId Int?
  workspaceId      Int

  ordererName  String
  ordererEmail String?
  ordererPhone String?

  receiverName  String?
  receiverEmail String?
  receiverPhone String?

  price    Int?      @db.UnsignedMediumInt
  quantity Int?      @db.UnsignedMediumInt
  orderAt  DateTime?

  deliveryAddress        String?
  deliveryMessage        String?
  deliveryCompany        String?
  deliveryTrackingNumber String?

  createdBy OrderCreatedBy @default(SYSTEM)

  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
  store          Store           @relation(fields: [storeId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  deletedAt    DateTime?
  eventHistory EventHistory[]
  orderHistory OrderHistory[]

  @@unique([orderId, productId, productOrderId, storeId])
  @@unique([orderId, productOrderId, storeId])
  @@index([productOrderId])
}

enum OrderStatus {
  PAY_WAITING
  PAYED
  PRODUCT_PREPARE
  DELIVERING
  DELIVERED
  PURCHASE_CONFIRM
  EXCHANGE
  CANCEL
  REFUND
  CANCEL_NOPAY
}

model OrderHistory {
  id Int @id @default(autoincrement())

  type          OrderHistoryType
  changedStatus OrderStatus?
  message       String?

  orderId        Int
  eventHistoryId String?
  storeId        Int
  workspaceId    Int

  order        Order         @relation(fields: [orderId], references: [id])
  store        Store         @relation(fields: [storeId], references: [id])
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  eventHistory EventHistory? @relation(fields: [eventHistoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId, workspaceId])
}

enum OrderHistoryType {
  STATUS_CHANGE
  EVENT
  MESSAGE
}

model ContentGroup {
  id          Int @id @default(autoincrement())
  workspaceId Int

  name          String
  type          ContentType @default(TEXT)
  oneTime       Boolean     @default(false)
  expireMinute  Int?
  downloadLimit Int?
  lastRemindAt  DateTime? // 마지막 재고 부족 알림 시간

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  content Content[]
  message Message[]
}

enum ContentType {
  FILE
  TEXT
  URL
  QRCODE
  BARCODE
}

model Content {
  id             Int     @id @default(autoincrement())
  workspaceId    Int
  contentGroupId Int
  used           Boolean @default(false)

  text String?
  type ContentType @default(TEXT)

  status    ContentStatus @default(PENDING)
  name      String?
  key       String?
  size      Int?
  mimeType  String?
  extension String?

  contentGroup ContentGroup @relation(fields: [contentGroupId], references: [id])
  workspace    Workspace    @relation(fields: [workspaceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  eventHistoryContents EventHistoryContentConnection[]
}

enum ContentStatus {
  PENDING
  READY
}

model Event {
  id               Int  @id @default(autoincrement())
  workspaceId      Int
  productId        Int?
  productVariantId Int?
  messageId        Int

  type    OrderStatus
  enabled Boolean     @default(true)

  delayDays Int?
  sendHour  Int? // 0 ~ 23 korea standard time

  product        Product?        @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  message        Message         @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  eventHistory EventHistory[]

  @@unique([productId, productVariantId, messageId, type])
}

model EventHistoryContentConnection {
  id Int @id @default(autoincrement())

  eventHistoryId String
  contentId      Int

  eventHistory    EventHistory @relation(fields: [eventHistoryId], references: [id])
  content         Content      @relation(fields: [contentId], references: [id])
  downloadCount   Int          @default(0)
  downloadLimit   Int?
  disableDownload Boolean      @default(false)
  lastDownloadAt  DateTime?
  firstDownloadAt DateTime?
  expiredAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EventHistory {
  id          String @id @default(uuid())
  workspaceId Int
  eventId     Int?
  orderId     Int?
  messageId   Int?

  receiverPhone String?
  receiverEmail String?

  messageContent   String? @db.LongText
  messageVariables Json?

  status     EventStatus
  rawMessage String?

  // 예정 발송 시간
  scheduledAt       DateTime?
  processedAt       DateTime?
  externalMessageId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workspace    Workspace                       @relation(fields: [workspaceId], references: [id])
  event        Event?                          @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order        Order?                          @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  message      Message?                        @relation(fields: [messageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderHistory OrderHistory[]
  contents     EventHistoryContentConnection[]
}

enum EventStatus {
  PENDING // 발송 준비 중
  CONTENT_READY // 컨텐츠 준비 완료
  READY // 발송 준비 완료
  PROCESSING // 발송 중 (SOLAPI 응답 대기 또는 이메일)
  SUCCESS // 발송 완료
  FAILED // 발송 실패
}

model Message {
  id               Int             @id @default(autoincrement())
  name             String
  completeDelivery Boolean         @default(false)
  sendType         MessageSendType
  type             MessageType     @default(FULLY_CUSTOM)

  content String?

  workspaceId     Int?
  kakaoTemplateId Int?
  contentGroupId  Int?

  target      MessageTarget?
  customPhone String?
  customEmail String?

  kakaoTemplate KakaoTemplate? @relation(fields: [kakaoTemplateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspace     Workspace?     @relation(fields: [workspaceId], references: [id])
  contentGroup  ContentGroup?  @relation(fields: [contentGroupId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  event        Event[]
  eventHistory EventHistory[]
}

enum MessageType {
  GLOBAL
  CUSTOM
  FULLY_CUSTOM
}

enum MessageSendType {
  KAKAO
}

enum MessageTarget {
  BUYER
  RECEIVER
  CUSTOM
}

model KakaoTemplate {
  id                Int                 @id @default(autoincrement())
  name              String?
  description       String?
  templateId        String              @unique
  status            KakaoTemplateStatus @default(PENDING)
  isCustomAvailable Boolean             @default(false) // 커스텀 메시지 사용 가능 여부

  categoryCode String
  content      String @db.LongText

  /// [KakaoTemplateButtons]
  buttons Json?

  imageId  String?
  imageUrl String?
  extra    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  message   Message[]
}

enum KakaoTemplateStatus {
  UPLOADED
  PENDING
  APPROVED
  REJECTED
}

model Variables {
  id Int @id @default(autoincrement())

  key         String  @unique
  value       String
  description String?
  example     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PurchaseHistory {
  id String @id @default(uuid())

  workspaceId Int

  amount         Int? // 결제 금액
  discountAmount Int? @default(0) // 할인 금액 
  totalAmount    Int? // 총 결제 금액

  reason      String?
  status      PurchaseStatus
  purchasedAt DateTime?
  retry       Int            @default(0)

  scheduledId String?

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  billing   Billing? @relation(fields: [billingId], references: [id])
  billingId Int?

  @@index([workspaceId])
}

model Config {
  id Int @id @default(autoincrement())

  defaultPrice      Int @default(5000)
  alimtalkSendPrice Int @default(100)
  emailSendPrice    Int @default(150)
  contentSendPrice  Int @default(100)
}

enum PurchaseStatus {
  CANCELLED
  FAILED
  PAID
  PARTIAL_CANCELLED
  PAY_PENDING
  READY
  VIRTUAL_ACCOUNT_ISSUED
}

model DailyStoreStatistics {
  id Int @id @default(autoincrement())

  storeId        Int
  orderDate      DateTime @db.Date
  totalOrders    Int
  totalQuantity  Int
  totalSales     Int
  totalRefund    Int
  totalCancelled Int

  createdAt DateTime @default(now())

  store Store @relation(fields: [storeId], references: [id])

  @@unique([storeId, orderDate])
}

model MonthlyStoreStatistics {
  id Int @id @default(autoincrement())

  storeId        Int
  orderMonth     DateTime @db.Date
  totalOrders    Int
  totalQuantity  Int
  totalSales     Int
  totalRefund    Int
  totalCancelled Int

  createdAt DateTime @default(now())

  store Store @relation(fields: [storeId], references: [id])

  @@unique([storeId, orderMonth])
}

model DailyWorkspaceStatistics {
  id Int @id @default(autoincrement())

  workspaceId    Int
  orderDate      DateTime @db.Date
  totalOrders    Int
  totalQuantity  Int
  totalSales     Int
  totalRefund    Int
  totalCancelled Int

  createdAt DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, orderDate])
}

model MonthlyWorkspaceStatistics {
  id Int @id @default(autoincrement())

  workspaceId    Int
  orderMonth     DateTime @db.Date
  totalOrders    Int
  totalQuantity  Int
  totalSales     Int
  totalRefund    Int
  totalCancelled Int

  createdAt DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, orderMonth])
}
