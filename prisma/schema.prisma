generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String
  salt     String

  refreshToken String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  provider   Provider @default(LOCAL)
  providerId String?

  workspaceUser WorkspaceUser[]

  @@unique([provider, providerId])
}

enum Provider {
  LOCAL
  NAVER
}

model InternalMailTemplate {
  id Int @id @default(autoincrement())

  // mail

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model WorkspaceUser {
  id          Int           @id @default(autoincrement())
  userId      Int
  workspaceId Int
  role        WorkspaceRole @default(MEMBER)

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, workspaceId])
}

enum WorkspaceRole {
  OWNER
  MEMBER
}

model Workspace {
  id     Int    @id @default(autoincrement())
  name   String
  credit Int    @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  subscriptionId      Int?
  subscriptionEndedAt DateTime?

  subscription SubscriptionModel? @relation(fields: [subscriptionId], references: [id])

  workspaceUser    WorkspaceUser[]
  store            Store[]
  product          Product[]
  order            Order[]
  content          Content[]
  event            Event[]
  kakaoCredential  KakaoCredential?
  messageTemplate  MessageTemplate[]
  orderHistory     OrderHistory[]
  contentGroup     ContentGroup[]
  workspaceCredit  WorkspaceCredit[]
  purchaseHistory  PurchaseHistory[]
  workspaceBilling WorkspaceBilling[]
  EventHistory     EventHistory[]
}

model WorkspaceBilling {
  id               Int     @id @default(autoincrement())
  workspaceId      Int
  cardNumber       String
  hashedCardNumber String
  billingKey       String  @unique
  default          Boolean @default(false)

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  PurchaseHistory PurchaseHistory[]

  @@unique([workspaceId, hashedCardNumber])
}

model WorkspaceCredit {
  id           Int        @id @default(autoincrement())
  workspaceId  Int
  amount       Int        @default(0)
  remainAmount Int        @default(0)
  type         CreditType @default(ADD)
  reason       String?
  expireAt     DateTime?

  workspace Workspace? @relation(fields: [workspaceId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  deletedAt       DateTime?
  PurchaseHistory PurchaseHistory[]
  EventHistory    EventHistory[]
}

enum CreditType {
  ADD
  USE
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String
  type        StoreType
  enabled     Boolean   @default(true)
  readonly    Boolean   @default(false)
  workspaceId Int

  lastProductSyncAt DateTime?
  lastOrderSyncAt   DateTime?

  smartStoreCredentials SmartStoreCredentials?
  workspace             Workspace              @relation(fields: [workspaceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  product      Product[]
  order        Order[]
  orderHistory OrderHistory[]
}

enum StoreType {
  SMARTSTORE
}

model SmartStoreCredentials {
  id        Int    @id @default(autoincrement())
  name      String
  storeId   Int    @unique
  channelId Int

  applicationId     String
  applicationSecret String
  emailParseable    Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  store Store @relation(fields: [storeId], references: [id])
}

model SmartStoreToken {
  applicationId     String
  applicationSecret String

  accessToken String?
  expiresAt   DateTime?

  @@id([applicationId, applicationSecret])
}

model Product {
  id           Int     @id @default(autoincrement())
  name         String
  productImage String?

  productId   String
  storeId     Int
  workspaceId Int

  store     Store     @relation(fields: [storeId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  deletedAt      DateTime?
  productVariant ProductVariant[]
  order          Order[]
  event          Event[]

  @@unique([productId, storeId])
}

model ProductVariant {
  id        Int    @id @default(autoincrement())
  productId Int
  variantId String

  name String

  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  order     Order[]
  event     Event[]

  @@unique([variantId, productId])
}

model Order {
  id Int @id @default(autoincrement())

  productOrderId String
  orderId        String
  status         OrderStatus @default(PAY_WAITING)

  storeId          Int
  productId        Int
  productVariantId Int?
  workspaceId      Int

  ordererName  String
  ordererEmail String?
  ordererPhone String?

  receiverName  String?
  receiverEmail String?
  receiverPhone String?

  price    Int?
  quantity Int?
  orderAt  DateTime?

  deliveryAddress        String?
  deliveryMessage        String?
  deliveryCompany        String?
  deliveryTrackingNumber String?

  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
  store          Store           @relation(fields: [storeId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  deletedAt    DateTime?
  eventHistory EventHistory[]
  orderHistory OrderHistory[]

  @@unique([orderId, productId, productOrderId, storeId])
  @@unique([orderId, productOrderId, storeId])
  @@index([productOrderId])
}

enum OrderStatus {
  PAY_WAITING
  PAYED
  PRODUCT_PREPARE
  DELIVERING
  DELIVERED
  PURCHASE_CONFIRM
  EXCHANGE
  CANCEL
  REFUND
  CANCEL_NOPAY
}

model OrderHistory {
  id Int @id @default(autoincrement())

  type          OrderHistoryType
  changedStatus OrderStatus?
  message       String?

  orderId        Int
  eventHistoryId String?
  storeId        Int
  workspaceId    Int

  order        Order         @relation(fields: [orderId], references: [id])
  store        Store         @relation(fields: [storeId], references: [id])
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  eventHistory EventHistory? @relation(fields: [eventHistoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId, workspaceId])
}

enum OrderHistoryType {
  STATUS_CHANGE
  EVENT
  MESSAGE
}

model ContentGroup {
  id          Int         @id @default(autoincrement())
  name        String
  workspaceId Int
  type        ContentType @default(TEXT)
  readonly    Boolean     @default(false)

  oneTime       Boolean @default(false)
  expireMinute  Int?
  downloadLimit Int?

  workspace       Workspace         @relation(fields: [workspaceId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  deletedAt       DateTime?
  content         Content[]
  messageTemplate MessageTemplate[]
}

enum ContentType {
  FILE
  TEXT
  URL
  QRCODE
  BARCODE
}

model Content {
  id             Int     @id @default(autoincrement())
  workspaceId    Int
  contentGroupId Int
  used           Boolean @default(false)

  // text type QR code, barcode, url, etc...
  text String?

  // file type
  status    ContentStatus @default(PENDING)
  name      String?
  key       String?
  size      Int?
  mimeType  String?
  extension String?

  contentGroup ContentGroup @relation(fields: [contentGroupId], references: [id])
  workspace    Workspace    @relation(fields: [workspaceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  eventHistory EventHistory[]
}

enum ContentStatus {
  PENDING
  READY
}

model KakaoCredential {
  id          Int    @id @default(autoincrement())
  workspaceId Int    @unique
  channelId   String @unique
  searchId    String @unique

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  KakaoTemplate KakaoTemplate[]
}

model Event {
  id               Int  @id @default(autoincrement())
  workspaceId      Int
  productId        Int
  productVariantId Int?
  messageId        Int

  type OrderStatus

  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  message        MessageTemplate @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  eventHistory EventHistory[]

  @@unique([productId, productVariantId, messageId, type])
}

model EventHistory {
  id          String @id @default(uuid())
  workspaceId Int
  eventId     Int?
  orderId     Int?
  contentId   Int?
  messageId   Int?
  creditId    Int?

  messageContent   String? @db.LongText
  messageVariables Json?

  expiredAt       DateTime?
  downloadCount   Int       @default(0)
  disableDownload Boolean   @default(false)

  status  EventStatus
  message String?

  processedAt      DateTime?
  solapiStatusCode String?
  solapiMessageId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  credit          WorkspaceCredit? @relation(fields: [creditId], references: [id])
  content         Content?         @relation(fields: [contentId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  event           Event?           @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order           Order?           @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  messageTemplate MessageTemplate? @relation(fields: [messageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderHistory    OrderHistory[]
}

enum EventStatus {
  PENDING // 발송 준비 중
  CONTENT_READY // 컨텐츠 준비 완료
  READY // 발송 준비 완료
  PROCESSING // 발송 중 (SOLAPI 응답 대기 또는 이메일)
  SUCCESS // 발송 완료
  FAILED // 발송 실패
}

model MessageTemplate {
  id               Int     @id @default(autoincrement())
  name             String
  completeDelivery Boolean @default(false)
  readonly         Boolean @default(false)

  /// [TemplateVariables]
  variables Json?

  workspaceId     Int
  kakaoTemplateId Int?
  contentGroupId  Int?

  kakaoTemplate KakaoTemplate? @relation(fields: [kakaoTemplateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspace     Workspace      @relation(fields: [workspaceId], references: [id])
  contentGroup  ContentGroup?  @relation(fields: [contentGroupId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  event        Event[]
  EventHistory EventHistory[]
}

model KakaoTemplate {
  id                Int                 @id @default(autoincrement())
  templateId        String              @unique
  kakaoCredentialId Int?
  status            KakaoTemplateStatus @default(PENDING)

  categoryCode String
  content      String @db.LongText

  /// [KakaoTemplateButtons]
  buttons Json?

  imageId  String?
  imageUrl String?
  extra    String?

  kakaoCredential KakaoCredential?  @relation(fields: [kakaoCredentialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  MessageTemplate MessageTemplate[]
}

enum KakaoTemplateStatus {
  APPROVED
  REJECTED
  PENDING
  UPLOADED
}

model Variables {
  id Int @id @default(autoincrement())

  key         String  @unique
  value       String
  description String?
  example     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SubscriptionModel {
  id Int @id @default(autoincrement())

  name        String
  description String?
  price       Int

  isContentEnabled Boolean @default(false)

  contentLimit Int @default(0)
  messageLimit Int @default(0)
  storeLimit   Int @default(0)

  contentCredit  Int @default(30)
  alimTalkCredit Int @default(20)
  emailCredit    Int @default(40)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  PurchaseHistory PurchaseHistory[]
  Workspace       Workspace[]
}

model PurchaseHistory {
  id String @id @default(uuid())

  workspaceId Int

  amount      Int?
  reason      String?
  type        PurchaseType
  status      PurchaseStatus
  purchasedAt DateTime?

  billingId      Int?
  creditId       Int?
  subscriptionId Int?
  scheduledId    String?

  startedAt DateTime?
  endedAt   DateTime?

  workspace    Workspace          @relation(fields: [workspaceId], references: [id])
  credit       WorkspaceCredit?   @relation(fields: [creditId], references: [id])
  subscription SubscriptionModel? @relation(fields: [subscriptionId], references: [id])
  billing      WorkspaceBilling?  @relation(fields: [billingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([workspaceId])
  @@index([subscriptionId])
}

enum PurchaseType {
  CREDIT
  SUBSCRIPTION
  CHANGE_SUBSCRIPTION
}

enum PurchaseStatus {
  CANCELLED
  FAILED
  PAID
  PARTIAL_CANCELLED
  PAY_PENDING
  READY
  VIRTUAL_ACCOUNT_ISSUED
}
